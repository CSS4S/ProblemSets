---
title: "Problem 2.1: The Legacy-Adaptive (LA) diffusion model"
editor: 
  markdown: 
    wrap: 72
---

```{r setup, include=FALSE}

# Load dependencies.
library(tibble)
library(dplyr)
library(ggplot2)
library(ggforce)
library(igraph)
library(forcats)
library(netrankr)
library(magrittr)

source("util.R")
```

This problem first summarizes the continuous-time, differential
equations version of the legacy-adaptive model intended for everyone,
even those without a calculus course. It then introduces the student to
agent-based modeling via the LA model after a quick primer on
agent-based modeling.

## Continuous-time LA model (1 point)

In this problem, you will learn about the continuous-time version of the
legacy-adaptive model. "Continuous time" means that the difference
between time *step* $t$ and the next time step $t+1$ becomes
infinitesimally small. This enables us to use tools from calculus, the
mathematical system for relating rates of change that describe many
physical and biological phenomena, including the diffusion of
adaptations which we use it for here.

You do not need to solve any differential equations yourselves, but you
will need to write a function that uses the solution in the following
problem. The differential equations for the continuous-time model are
nearly identical to the discrete-time recursion.

Please see the [derivation in the Course
Notes](https://mt.digital/teaching/CSS4S/notes/#legacy-adapt) of the
continuous-time equation for $A(t)$ ([Equation
7](https://mt.digital/teaching/CSS4S/notes/#eq-logistic-LA) in the
course notes): $$
A(t) = \frac{N}{1 + \frac{N}{A_0}e^{-\alpha N t}},
$$ {#eq-logistic-LA}

Write an R function called `adoption_total` that returns the value of
$A(t)$ given parameters $N$, $A_0$, and $\alpha$. The function signature
should look something like this:

```{r}
adoption_total <- function(t, A_0 = 5, N = 100, alpha = 0.2) {
  # YOUR CODE HERE
}
```

Create

## Agent-based LA model (1 point)

In this problem you get your first experience with agent-based modeling,
using software tools provided for you in [`socmod.R`](../socmod.R) in
the root directory. Agent-based modeling is a form of computational
modeling where individuals and their interactions are explicitly,
mechanistically represented in the form of computer code. We will match
the well-mixed approximations as well as we can using agent-based
modeling. In general, though, social networks break the well-mixed and
mass-action assumptions, which we will see more explicitly in [Problem
5](5_AdoptionProbabilities.html). For now, please review the Primer on
agent-based modeling, below. You can adapt code from the primer for
Problem PS2.1.2 that follows.

### Agents and agent-based modeling of social behavior

#### Specify the LA agent-based model (0.5 points)

```{r}
partner_selection <- function(learner, model) {
  # YOUR CODE HERE.
}

la_interaction <- function(learner, teacher, model) {
  if (runif() < model$adoption_rate) {
    # YOUR CODE HERE.
  }
}

la_model <- AgentBasedModel$new(lal_partner_selection, la_interaction)
```

#### Compare adoption curves from continuous-time and agent-based models (0.5 points)

In this problem, create three time series for both the continuous-time
and agent-based models.
