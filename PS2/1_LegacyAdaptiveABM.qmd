---
title: "Problem 2.1: The Legacy-Adaptive (LA) diffusion model"
editor: 
  markdown: 
    wrap: 72
---

```{r setup, include=FALSE}

# Load dependencies.
library(tibble)
library(dplyr)
library(ggplot2)
library(ggforce)
library(igraph)
library(forcats)
library(netrankr)
library(magrittr)

source("util.R")
```

This problem first summarizes the continuous-time, differential
equations version of the legacy-adaptive model intended for everyone,
even those without a calculus course. It then introduces the student to
agent-based modeling via the LA model after a quick primer on
agent-based modeling.

## Continuous-time LA model (1 point)

In this problem, you will learn about the continuous-time version of the
legacy-adaptive model. "Continuous time" means that the difference
between time *step* $t$ and the next time step $t+1$ becomes
infinitesimally small. This enables us to use tools from calculus, the
mathematical system for relating rates of change that describe many
physical and biological phenomena, including the diffusion of
adaptations which we use it for here.

You do not need to solve any differential equations yourselves, but you
will need to write a function that uses the solution in the following
problem. The differential equations for the continuous-time model are
nearly identical to the discrete-time recursion.

Please see the [derivation in the Course
Notes](https://mt.digital/teaching/CSS4S/notes/#legacy-adapt) of the
continuous-time equation for $A(t)$ ([Equation
7](https://mt.digital/teaching/CSS4S/notes/#eq-logistic-LA) in the
course notes): $$
A(t) = \frac{N}{1 + \frac{N}{A_0}e^{-\alpha N t}},
$$ {#eq-logistic-LA}

Write an R function here 
called `adoption_total` that returns the value of
$A(t)$ at time $t$, given parameters $N$, $A_0$, and $\alpha$. 
The function signature should look something like this:

```{r}
adoption_total <- function(t, A_0 = 5, N = 100, alpha = 0.2) {
  # YOUR CODE HERE TO CALCULATE THE CORRECT RETURN VALUE, ret.
  ret <- 0

  return (ret)
}
```

You will use this in the next problem to compare plots of this
continuous, "closed-form" version of $A(t)$ to agent-based simulations.

## Agent-based LA model (1 point)

In this problem you get your first experience with agent-based modeling,
using software tools provided for you in [`socmod.R`](../socmod.R) in
the root directory. Agent-based modeling is a form of computational
modeling where individuals and their interactions are explicitly,
mechanistically represented in the form of computer code. We will match
the well-mixed approximations as well as we can using agent-based
modeling.

### Agents and agent-based modeling of social behavior

#### Specify the LA agent-based model (0.5 points)

For this part of the problem, adapt the [toy ABM example in the Course
Notes](<https://mt.digital/teaching/CSS4S/notes/#agent-based-modeling>)
to implement an agent-based LA model.

```{r}
partner_selection <- function(learner, model) {
  # YOUR CODE HERE.
}

la_interaction <- function(learner, teacher, model) {
  if (runif() < model$adoption_rate) {
    # YOUR CODE HERE.
  }
}
```

#### Compare adoption curves from continuous-time and agent-based models (0.5 points)

In this problem, create three time series plots of adoption over time for 
$\alpha = 0.05,~0.2,\text{ and }0.5$. both the continuous-time and agent-based
models, for a total of six time series. 

Before writing any code, write here how you think different combinations of
adoption and drop rates will affect the shape of the adoption curves. Also
explain whether and how the continuous-time and agent-based models
will be similar or different.

Put your code with resulting plots below or in a separate R file that you
include here with `source`. After that, explain whether
your hypotheses were correct or not. Close with a few sentences
explaining the difference between continuous-time and agent-based
models, reflecting on what you observed in the plots.


```{r}
# YOUR CODE HERE

source("mycode.R")
```
